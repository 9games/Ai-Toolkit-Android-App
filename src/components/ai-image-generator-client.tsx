"use client";

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import Image from 'next/image';

import { aiImageGenerator } from '@/ai/flows/ai-image-generator';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import { ImageIcon, Sparkles } from 'lucide-react';

const formSchema = z.object({
  prompt: z.string().min(10, 'Prompt must be at least 10 characters long.'),
});

export function AiImageGeneratorClient() {
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: '',
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsLoading(true);
    setImageUrl(null);

    try {
      const result = await aiImageGenerator({ prompt: values.prompt });
      setImageUrl(result.imageUrl);
    } catch (error) {
      console.error('Image generation failed:', error);
      toast({
        variant: 'destructive',
        title: 'Uh oh! Something went wrong.',
        description: 'Failed to generate image. Please try again.',
      });
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <Card className="border-2 border-primary/20 shadow-lg">
      <CardContent className="p-6">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="prompt"
              render={({ field }) => (
                <FormItem>
                  <FormLabel className="text-lg font-semibold">Image Prompt</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., A cute cat astronaut in a synthwave galaxy" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" disabled={isLoading} size="lg" className="w-full">
              {isLoading ? 'Generating...' : 'Generate Image'}
              <Sparkles className="ml-2 h-5 w-5" />
            </Button>
          </form>
        </Form>

        {(isLoading || imageUrl) && (
          <div className="mt-6">
            <h3 className="text-lg font-semibold mb-2">Generated Image</h3>
            <div className="aspect-square w-full rounded-lg border bg-card overflow-hidden">
              {isLoading && (
                 <div className="flex flex-col items-center justify-center h-full bg-muted/50">
                    <ImageIcon className="h-16 w-16 text-muted-foreground animate-pulse" />
                    <p className="mt-4 text-muted-foreground">AI is painting a masterpiece...</p>
                 </div>
              )}
              {imageUrl && (
                <Image
                  src={imageUrl}
                  alt="Generated by AI"
                  width={512}
                  height={512}
                  className="w-full h-full object-cover"
                />
              )}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
